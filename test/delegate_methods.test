
set libDir [file normalize [file join [file dirname [info script]] ..]]
if {[lsearch $auto_path $libDir] < 0} {
    lappend auto_path $libDir
}

package require tcltest
package require snit 3.0.0

namespace import ::snit::*



#-----------------------------------------------------------------------
# delegated methods

::tcltest::test dmethod-1.1 {delegate method to non-existent component} -body {
    type dog {
        delegate method foo to bar
    }

    dog create spot
    spot foo
} -returnCodes {
    error
} -cleanup {
    dog destroy
} -result {unknown method "foo": must be cget, configure, destroy, info or install}

::tcltest::test dmethod-1.2 {delegating to existing component} -body {
    type dog {
        constructor {args} {
            install string using string
        }

        delegate method length to string
    }

    dog create spot
    spot length foo
} -cleanup {
    dog destroy
} -result {3}

# Case 2
::tcltest::test dmethod-1.4 {delegating to existing component with error} -body {
    type dog {
        constructor {args} {
            install string using string
        }

        delegate method length to string
    }

    dog create spot
    spot length foo bar
} -cleanup {
    dog destroy
} -returnCodes {
    error
} -result {wrong # args: should be "string length string"}

::tcltest::test dmethod-1.5 {delegating unknown methods to existing component} -body {
    type dog {
        constructor {args} {
            install string using string
        }

        delegate method * to string
    }

    dog create spot
    spot length foo
} -cleanup {
    dog destroy
} -result {3}

::tcltest::test dmethod-1.6 {delegating unknown method to existing component with error} -body {
    type dog {
        constructor {args} {
            install stringhandler using string
        }

        delegate method * to stringhandler
    }

    dog create spot
    spot foo bar
} -constraints {
    snit1
} -returnCodes {
    error
} -cleanup {
    dog destroy
} -result {bad option "foo": must be bytelength, compare, equal, first, index, is, last, length, map, match, range, repeat, replace, tolower, toupper, totitle, trim, trimleft, trimright, wordend, or wordstart}

::tcltest::test dmethod-1.6a.0 {delegating unknown method to existing component with error} -body {
    type dog {
        constructor {args} {
            install stringhandler using string
        }

        delegate method * to stringhandler
    }

    dog create spot
    spot foo bar
} -constraints {
    snit2 tcl8.5minus
} -returnCodes {
    error
} -cleanup {
    dog destroy
} -result {unknown or ambiguous subcommand "foo": must be bytelength, compare, equal, first, index, is, last, length, map, match, range, repeat, replace, reverse, tolower, totitle, toupper, trim, trimleft, trimright, wordend, or wordstart}

::tcltest::test dmethod-1.6a.1 {delegating unknown method to existing component with error} -body {
    type dog {
        constructor {args} {
            install stringhandler using string
        }

        delegate method * to stringhandler
    }

    dog create spot
    spot foo bar
} -returnCodes {
    error
} -cleanup {
    dog destroy
} -result {unknown or ambiguous subcommand "foo": must be bytelength, cat, compare, equal, first, index, is, last, length, map, match, range, repeat, replace, reverse, tolower, totitle, toupper, trim, trimleft, trimright, wordend, or wordstart}

::tcltest::test dmethod-1.7 {can't delegate local method: order 1} -body {
    type cat {
        method foo {} {}
        delegate method foo to hull
    }
} -returnCodes {
    error
} -result {Error in "delegate method foo...", "foo" has been defined locally.}

::tcltest::test dmethod-1.8 {can't delegate local method: order 2} -body {
    type cat {
        delegate method foo to hull
        method foo {} {}
    }
} -returnCodes {
    error
} -result {Error in "method foo...", "foo" has been delegated}

# Case 1
::tcltest::test dmethod-1.9 {excepted methods are caught properly} -constraints {
    snit1
} -body {
    type tail {
        method wag {}    {return "wagged"}
        method flaunt {} {return "flaunted"}
        method tuck {}   {return "tuck"}
    }

    type cat {
        method meow {} {}
        delegate method * to tail except {wag tuck}

        constructor {args} {
            install tail using tail %AUTO%
            #set tail [tail %AUTO%]
        }
    }

    cat fifi

    catch {fifi flaunt} a
    catch {fifi wag}    b
    catch {fifi tuck}   c

    list $a $b $c
} -cleanup {
    cat destroy
    tail destroy
} -result {flaunted {"::fifi wag" is not defined} {"::fifi tuck" is not defined}}

# Case 2
::tcltest::test dmethod-1.10 {excepted methods are caught properly} -constraints {
    snit2
} -body {
    type tail {
        method wag {}    {return "wagged"}
        method flaunt {} {return "flaunted"}
        method tuck {}   {return "tuck"}
    }

    type cat {
        method meow {} {}
        delegate method * to tail except {wag tuck}

        constructor {args} {
            set tail [tail %AUTO%]
        }
    }

    cat fifi

    catch {fifi flaunt} a
    catch {fifi wag}    b
    catch {fifi tuck}   c

    list $a $b $c
} -cleanup {
    cat destroy
    tail destroy
} -result {flaunted {unknown subcommand "wag": must be flaunt} {unknown subcommand "tuck": must be flaunt}}

::tcltest::test dmethod-1.11 {as clause can include arguments} -body {
    type tail {
        method wag {adverb}    {return "wagged $adverb"}
    }

    type dog {
        delegate method wag to tail as {wag briskly}

        constructor {args} {
            install tail using tail %AUTO%
        }
    }

    dog spot

    spot wag
} -cleanup {
    dog destroy
    tail destroy
} -result {wagged briskly}

::tcltest::test dmethod-2.1 {'using "%c %m"' gets normal behavior} -body {
    type tail {
        method wag {adverb}    {return "wagged $adverb"}
    }

    type dog {
        delegate method wag to tail using {%c %m}

        constructor {args} {
            install tail using tail %AUTO%
        }
    }

    dog spot

    spot wag briskly
} -cleanup {
    dog destroy
    tail destroy
} -result {wagged briskly}

::tcltest::test dmethod-2.2 {All 'using' conversions are converted} -body {
    proc echo {args} { return $args }

    type dog {
        delegate method {tail wag} using {echo %% %t %M %m %j %n %w %s %c}
    }

    dog spot

    spot tail wag
} -cleanup {
    dog destroy
    rename echo ""
} -result {% ::dog {tail wag} wag tail_wag ::dog::Snit_inst1 ::spot ::spot %c}

::tcltest::test dmethod-2.3 {"%%" is handled properly} -body {
    proc echo {args} { join $args "|" }

    type dog {
        delegate method wag using {echo %%m %%%m}
    }

    dog spot

    spot wag
} -cleanup {
    dog destroy
    rename echo ""
} -result {%m|%wag}

::tcltest::test dmethod-2.4 {Method "*" and "using"} -body {
    proc echo {args} { join $args "|" }

    type dog {
        delegate method * using {echo %m}
    }

    dog spot

    list [spot wag] [spot bark loudly]
} -cleanup {
    dog destroy
    rename echo ""
} -result {wag bark|loudly}


::tcltest::test dmethod-3.1 {component names can be changed dynamically} -body {
    type tail1 {
        method wag {}    {return "wagged"}
    }

    type tail2 {
        method wag {}    {return "drooped"}
    }

    type dog {
        delegate method wag to tail

        constructor {args} {
            set tail [tail1 %AUTO%]
        }

        method switchit {} {
            set tail [tail2 %AUTO%]
        }
    }

    dog fido

    set a [fido wag]
    fido switchit
    set b [fido wag]

    list $a $b
} -cleanup {
    dog destroy
    tail1 destroy
    tail2 destroy
} -result {wagged drooped}

::tcltest::test dmethod-4.1 {hierarchical method, two tokens} -body {
    type tail {
        method wag {} {return "wags tail"}
    }

    type dog {
        constructor {} {
            set tail [tail %AUTO%]
        }
        delegate method {wag tail} to tail as wag
    }

    dog spot
    spot wag tail
} -cleanup {
    dog destroy
    tail destroy
} -result {wags tail}

::tcltest::test dmethod-4.2 {hierarchical method, three tokens} -body {
    type tail {
        method wag {} {return "wags tail"}
    }

    type dog {
        constructor {} {
            set tail [tail %AUTO%]
        }
        delegate method {wag tail proudly} to tail as wag
    }

    dog spot
    spot wag tail proudly
} -cleanup {
    dog destroy
    tail destroy
} -result {wags tail}

::tcltest::test dmethod-4.3 {hierarchical method, three tokens} -body {
    type tail {
        method wag {} {return "wags tail"}
    }

    type dog {
        constructor {} {
            set tail [tail %AUTO%]
        }
        delegate method {wag tail really high} to tail as wag
    }

    dog spot
    spot wag tail really high
} -cleanup {
    dog destroy
    tail destroy
} -result {wags tail}

::tcltest::test dmethod-4.4 {redefinition is OK} -body {
    type tail {
        method {wag tail}    {} {return "wags tail"}
        method {wag briskly} {} {return "wags tail briskly"}
    }

    type dog {
        constructor {} {
            set tail [tail %AUTO%]
        }
        delegate method {wag tail} to tail as {wag tail}
        delegate method {wag tail} to tail as {wag briskly}
    }

    dog spot
    spot wag tail
} -cleanup {
    dog destroy
    tail destroy
} -result {wags tail briskly}

::tcltest::test dmethod-4.5 {all tokens are used by default} -body {
    type tail {
        method wag {} {return "wags tail"}
    }

    type dog {
        constructor {} {
            set tail [tail %AUTO%]
        }
        delegate method {tail wag} to tail
    }

    dog spot
    spot tail wag
} -cleanup {
    dog destroy
    tail destroy
} -result {wags tail}

::tcltest::test dmethod-4.6 {last token can be *} -body {
    type tail {
        method wag {} {return "wags"}
        method droop {} {return "droops"}
    }

    type dog {
        constructor {} {
            set tail [tail %AUTO%]
        }
        delegate method {tail *} to tail
    }

    dog spot

    list [spot tail wag] [spot tail droop]
} -cleanup {
    dog destroy
    tail destroy
} -result {wags droops}

# Case 1
::tcltest::test dmethod-4.7 {except with multiple tokens} -constraints {
    snit1
} -body {
    type tail {
        method wag {} {return "wags"}
        method droop {} {return "droops"}
    }

    type dog {
        constructor {} {
            set tail [tail %AUTO%]
        }
        delegate method {tail *} to tail except droop
    }

    dog spot

    catch {spot tail droop} result

    list [spot tail wag] $result
} -cleanup {
    dog destroy
    tail destroy
} -result {wags {"::spot tail droop" is not defined}}

# Case 2
::tcltest::test dmethod-4.8 {except with multiple tokens} -constraints {
    snit2
} -body {
    type tail {
        method wag {} {return "wags"}
        method droop {} {return "droops"}
    }

    type dog {
        constructor {} {
            set tail [tail %AUTO%]
        }
        delegate method {tail *} to tail except droop
    }

    dog spot

    catch {spot tail droop} result

    list [spot tail wag] $result
} -cleanup {
    dog destroy
    tail destroy
} -result {wags {unknown subcommand "droop": namespace ::dog::Snit_inst1 does not export any commands}}

::tcltest::test dmethod-4.9 {"*" in the wrong spot} -body {
    type dog {
        delegate method {tail * wag} to tail
    }
} -returnCodes {
    error
} -result {Error in "delegate method {tail * wag}...", "*" must be the last token.}

::tcltest::test dmethod-5.1 {prefix/method collision} -body {
    type dog {
        delegate method wag to tail
        delegate method {wag tail} to tail as wag
    }
} -returnCodes {
    error
} -result {Error in "delegate method {wag tail}...", "wag" has no submethods.}

::tcltest::test dmethod-5.2 {prefix/method collision} -body {
    type dog {
        delegate method {wag tail} to tail as wag
        delegate method wag to tail
    }
} -returnCodes {
    error
} -result {Error in "delegate method wag...", "wag" has submethods.}

::tcltest::test dmethod-5.3 {prefix/method collision} -body {
    type dog {
        delegate method {wag tail} to tail
        delegate method {wag tail proudly} to tail as wag
    }
} -returnCodes {
    error
} -result {Error in "delegate method {wag tail proudly}...", "wag tail" has no submethods.}

::tcltest::test dmethod-5.4 {prefix/method collision} -body {
    type dog {
        delegate method {wag tail proudly} to tail as wag
        delegate method {wag tail} to tail
    }
} -returnCodes {
    error
} -result {Error in "delegate method {wag tail}...", "wag tail" has submethods.}


tcltest::cleanupTests
